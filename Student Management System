

import json

import os
class Student:    def __init__(self, student_id, name, age, grade):        self.student_id = student_id        self.name = name        self.age = age        self.grade = grade
    def to_dict(self):        return {            'student_id': self.student_id,            'name': self.name,            'age': self.age,            'grade': self.grade        }
    @classmethod    def from_dict(cls, data):        return cls(data['student_id'], data['name'], data['age'], data['grade'])
class StudentManagementSystem:    def __init__(self, data_file='students.json'):        self.students = []        self.data_file = data_file        self.load_data()
    def load_data(self):        if os.path.exists(self.data_file):            with open(self.data_file, 'r') as file:                data = json.load(file)                self.students = [Student.from_dict(student) for student in data]
    def save_data(self):        with open(self.data_file, 'w') as file:            json.dump([student.to_dict() for student in self.students], file)
    def add_student(self, student):        if any(s.student_id == student.student_id for s in self.students):            print(f"Error: A student with ID {student.student_id} already exists.")        else:            self.students.append(student)            self.save_data()            print(f"Student {student.name} added successfully.")
    def view_students(self):        if not self.students:            print("No students found.")        else:            for student in self.students:                print(f"ID: {student.student_id}, Name: {student.name}, Age: {student.age}, Grade: {student.grade}")
    def update_student(self, student_id, name=None, age=None, grade=None):        for student in self.students:            if student.student_id == student_id:                if name:                    student.name = name                if age:                    student.age = age                if grade:                    student.grade = grade                self.save_data()                print(f"Student {student_id} updated successfully.")                return        print(f"Error: Student with ID {student_id} not found.")
    def delete_student(self, student_id):        for student in self.students:            if student.student_id == student_id:                self.students.remove(student)                self.save_data()                print(f"Student {student_id} deleted successfully.")                return        print(f"Error: Student with ID {student_id} not found.")
def main():    system = StudentManagementSystem()
    while True:        print("\nStudent Management System")        print("1. Add Student")        print("2. View Students")        print("3. Update Student")        print("4. Delete Student")        print("5. Exit")
        choice = input("Enter your choice: ")
        if choice == '1':            student_id = input("Enter student ID: ").strip()            if not student_id:                print("Error: Student ID cannot be empty.")                continue
            name = input("Enter student name: ").strip()            if not name:                print("Error: Student name cannot be empty.")                continue
            try:                age = int(input("Enter student age: ").strip())                if age <= 0:                    raise ValueError("Age must be a positive integer.")            except ValueError as e:                print(f"Error: {e}")                continue
            grade = input("Enter student grade: ").strip()            if not grade:                print("Error: Student grade cannot be empty.")                continue
            student = Student(student_id, name, age, grade)            system.add_student(student)
        elif choice == '2':            system.view_students()
        elif choice == '3':            student_id = input("Enter student ID to update: ").strip()            if not student_id:                print("Error: Student ID cannot be empty.")                continue
            name = input("Enter new name (or press Enter to skip): ").strip()            age = input("Enter new age (or press Enter to skip): ").strip()            grade = input("Enter new grade (or press Enter to skip): ").strip()
            try:                age = int(age) if age else None                if age is not None and age <= 0:                    raise ValueError("Age must be a positive integer.")            except ValueError as e:                print(f"Error: {e}")                continue
            system.update_student(student_id, name, age, grade)
        elif choice == '4':            student_id = input("Enter student ID to delete: ").strip()            if not student_id:                print("Error: Student ID cannot be empty.")                continue
            system.delete_student(student_id)
        elif choice == '5':            print("Exiting the system.")            break
        else:            print("Invalid choice. Please try again.")