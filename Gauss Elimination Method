import numpy as np
import sys

def gaussian_elimination(A):
n = len(A)
x = np.zeros(n)

# Perform Gaussian eliminationfor i in range(n):    if A[i][i] == 0.0:        sys.exit('Divide by zero detected!')
    for j in range(i + 1, n):        ratio = A[j][i] / A[i][i]        for k in range(n + 1):            A[j][k] -= ratio * A[i][k]
# Backward substitutionx[n - 1] = A[n - 1][n] / A[n - 1][n - 1]for i in range(n - 2, -1, -1):    x[i] = A[i][n]    for j in range(i + 1, n):        x[i] -= A[i][j] * x[j]    x[i] /= A[i][i]
return x

n = int(input('Enter the number of unknowns: '))
A = np.zeros((n, n + 1))

print('Enter the augmented matrix coefficients:')
for i in range(n):
for j in range(n + 1):
A[i][j] = float(input(f'a[{i}][{j}] = '))

solution = gaussian_elimination(A)

print('\nThe solution is:')
for i, val in enumerate(solution):
print(f'x{i} = {val:.2f}', end='\t')